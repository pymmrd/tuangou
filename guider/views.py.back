# Create your views here.
#from pylib
import random
import cStringIO
from hashlib import md5
from datetime import datetime, date, time
from PIL import Image, ImageDraw, ImageFont

#from django
from django.db.models import Q 
from django.conf import settings
from django.core.cache import cache
from django.utils import simplejson
from django.template import RequestContext
from django.http import Http404, HttpResponse
from django.views.decorators.cache import cache_page
from django.template.loader import render_to_string
from django.contrib.auth.decorators import login_required 
from django.shortcuts import render_to_response, get_object_or_404
from django.core.paginator import Paginator, InvalidPage, EmptyPage
from django.views.decorators.csrf import csrf_exempt
#from project 
from tuangou.guider.models import Deal, Website, City, District, Category, ReDeal, Website
from tuangou.wishlist.forms import DealWishForm
from tuangou.guider.forms import DealReviewForm 
from tuangou.guider.filters import filter_process
from tuangou.utils import set_cookie
from tuangou.utils.location import get_current_city
from tuangou.utils.paginator import paginate_util
from tuangou.guider.utils.klass import get_review_partition
from tuangou.guider.templatetags.paginate import smart_page_range
from tuangou.stats.utils.stats import recommended_from_views
from tuangou.accounts.profile import retrieve

@set_cookie
def show_city(request, slug, tmpl='guider/show_city.html'):
    object_list = {}
    param = request.GET.copy()
    city  = get_object_or_404(City, slug=slug)
    request.session['city'] = city
    banner_site = "tags/banner/%s_site.html" % city.slug
    object_list = ReDeal.nonexpires.filter(division=city) 
    object_list  = filter_process(object_list, param)
    result_list, paginator, page = paginate_util(object_list, param, settings.LIST_PER_PAGE)
    return render_to_response(tmpl, locals(), context_instance=RequestContext(request))

def show_district(request, slug, dist_slug, tmpl='grouppbuy/show_city_district.html'):
    param = request.GET.copy()
    city = request.session.get('city', None)
    district = get_object_or_404(District, slug=dist_slug)
    object_list = ReDeal.objects.filter(division=city, district=district,
        end_date__gte=datetime.combine(date.today(), time(0, 0, 0)))
    object_list  = filter_process(object_list, param)
    result_list, paginator, page = paginate_util(object_list, param, settings.LIST_PER_PAGE)
    return render_to_response(tmpl, locals(), context_instance=RequestContext(request))

#@cache_page(60*15)
def show_category(request, slug, cat_slug, tmpl='groupbuy/show_city_category.html'):
    param = request.GET.copy()
    city = request.session.get('city', None)
    banner_site = "tags/banner/%s_site.html" % city.slug
    category = get_object_or_404(Category, slug=cat_slug)
    if category.level == 0:
        object_list = ReDeal.objects.filter(division=city, category__parent=category,
            end_date__gte=datetime.combine(date.today(), time(0, 0, 0)))
    else:
        object_list = ReDeal.objects.filter(division=city, category=category,
            end_date__gte=datetime.combine(date.today(), time(0, 0, 0)))
    object_list  = filter_process(object_list, param)
    result_list, paginator, page = paginate_util(object_list, param, settings.LIST_PER_PAGE)
    return render_to_response(tmpl, locals(), context_instance=RequestContext(request))

#@cache_page(60*15)
def show_district_category(request, slug, dist_slug, cat_slug, tmpl='groupbuy/show_district_category.html'):
    param = request.GET.copy()
    city = request.session.get('city', None)
    banner_site = "tags/banner/%s_site.html" % city.slug
    district = get_object_or_404(District, slug=dist_slug)
    category = get_object_or_404(Category, slug=cat_slug)
    if category.level == 0: 
        object_list = ReDeal.objects.filter(division=city, district=district, category__parent=category,
            end_date__gte=datetime.combine(date.today(), time(0, 0, 0)))
    else:
        object_list = ReDeal.objects.filter(division=city, district=district, category=category,
            end_date__gte=datetime.combine(date.today(), time(0, 0, 0)))
    object_list  = filter_process(object_list, param) 
    result_list, paginator, page = paginate_util(object_list, param, settings.LIST_PER_PAGE) 
    return render_to_response(tmpl, locals(), context_instance=RequestContext(request))

def show_deal_detail(request, deal_id, tmpl="guider/show_deal.html"): 
    param = request.GET.copy()
    if request.user.is_authenticated():
        profile = retrieve(request)
    city = request.session.get('city', None)
    deal = get_object_or_404(ReDeal, pk=int(deal_id))
    from tuangou.stats.utils import stats
    stats.log_deal_view(request, deal)
    wishform = DealWishForm() 
    wishform.fields['wish_deal'].widget.attrs['value'] = deal.id
    similar_views = recommended_from_views(request)[:settings.DEAL_PER_ROW]
    reviewform = DealReviewForm()
    reviewform.fields['deal_id'].widget.attrs['value'] = deal.id
    model = get_review_partition(deal.id)
    reviews = model.objects.filter(deal=deal).order_by('-submit_date')
    review_counter = reviews.count()
    result_list, paginator, page = paginate_util(reviews, param ,settings.PER_PAGE_COMMENTS) 
    return render_to_response(tmpl, locals(), context_instance=RequestContext(request))

@csrf_exempt
@login_required
def get_reviews(request, tmpl="tags/review_list.html"):
    param = request.GET.copy()
    try:
        deal_id = int(param.get('deal_id', None))
    except (ValueError, TypeError):
        raise Http404
    deal = get_object_or_404(Deal, pk=deal_id)
    model = get_review_partition(deal.id)
    reviews = model.objects.filter(deal=deal).order_by('-submit_date')
    result_list, paginator, page = paginate_util(reviews, param , settings.PER_PAGE_COMMENTS) 
    html = render_to_string(tmpl, locals())
    page_range = smart_page_range(paginator.num_pages, page)
    flag = 'True'
    p = paginator.page(page)
    page_html = render_to_string('tags/more_paginator.html', locals())
    response = simplejson.dumps({'html':html, 'success':'True', 'page_html': page_html})
    return HttpResponse(response, content_type='application/javascript; charset=utf-8')

@csrf_exempt
@login_required
def deal_review(request, tmpl="tags/review_tags.html"):
    postdata = request.POST.copy()
    form = DealReviewForm(postdata)
    if form.is_valid():
        deal_id = form.cleaned_data['deal_id']
        comment  = form.cleaned_data['comment']
        deal = get_object_or_404(ReDeal, pk=deal_id)
        model = get_review_partition(deal_id)
        now = datetime.now()
        new  = model(comment=comment, deal=deal, user=request.user, ip_address=request.META.get('REMOTE_ADDR', None), submit_date=now)
        item = form.check_for_duplicate_comment(model, new)
        item.submit_date= now
        item.save()
        html = render_to_string(tmpl, locals())
        response = simplejson.dumps({'success':'True', 'html':html})
    else:
        response = simplejson.dumps({'success':'False'})
    return HttpResponse(response, content_type='application/javascript; charset=utf-8')

def sites(request, tmpl="guider/sites.html"):
    tag = "tags/%s_sites.html" 
    param = request.GET.copy()
    flag = param.get('flag', None)
    if flag:
        slug = param.get('slug', None)
        name = param.get('name', None)
        tag = "tags/sites/%s_sites.html" % slug 
        html = render_to_string(tag, locals())
        response = simplejson.dumps({'success':'True', 'html':html})
        return HttpResponse(response, content_type='application/javascript; charset=utf-8')
    else:
        city = request.session.get('city', None)
        slug = city.slug
        tag = "tags/sites/%s_sites.html" % slug 
    return render_to_response(tmpl, locals(), context_instance=RequestContext(request))

def open_api(request, tmpl="guider/open_api.html"):
    city = request.session.get('city', None)
    return render_to_response(tmpl, locals(), context_instance=RequestContext(request))
