from django import template
from django.conf import settings
from datetime import date
from tuangou.utils.cache import get_category_cache, get_districts_cache
from guider.models import Category, ReDeal, Deal_Shop_City_District, Shop, ViewChart
from guider.utils.guider import _rotate_category_index, _get_category_deals
from guider.utils.cache import cache_category_counter, cache_top_categories, cache_category, cache_top_districts, cache_category_childs
from tuangou.commerce.models import ActivityDeal

register = template.Library()

@register.inclusion_tag("tags/top_categories.html")
def top_categories(slug, cat_slug=None, dist_slug=None, parent=None):
    categories = Category.top_level().filter(is_active=True).order_by('order').values('title', 'slug')
    return locals()
    
@register.inclusion_tag("tags/district.html")
def district(city,  cat_slug=None, current_slug=None):
    districts = get_districts_cache(city)
    return locals()

@register.inclusion_tag("tags/shop.html")
def deal_shops(deal_id):
    shops= Deal_Shop_City_District.objects.filter(deal_id=deal_id)
    return locals()

@register.inclusion_tag('tags/recommend_tag.html')
def recommend_list(deals):
    return locals()

@register.inclusion_tag('tags/rotate_category.html')
def rotate_category(city, cat_slug, page_flag):
    index = 0
    page = 1
    MEDIA_URL = settings.MEDIA_URL
    number = settings.LIST_PER_PAGE
    today = date.today()
    try:
        rows, column, area = settings.ROWS_MAP[cat_slug]
    except KeyError:
        rows, column, area = [1, 4, None]
    category = get_category_cache(cat_slug)
    childs = category.children.values('title', 'slug').filter(is_active=True).order_by('order')
    deals, total = _get_category_deals(city, category)
    pageone = number if total > number else total
    offset= _rotate_category_index(rows, column, pageone)
    reserve = pageone - offset
    total_reserve = total - pageone
    result_list = deals[:offset]
    return locals()

@register.inclusion_tag('tags/spec_category.html')
def spec_activity_deal(city, page_flag):
    area = 's' 
    page = 1 
    index = 0 
    rows = 6 
    column = 3 
    number = 100 
    values =('pk', 'title', 'end_date','image', 'start_date', 'deal_url', 'price', 'origin_price', 'discount', 'bought', 'is_ad', 'website__name')
    today = date.today()
    MEDIA_URL = settings.MEDIA_URL
    category = Category.objects.get(slug='huodongzhuanqu')
    childs = category.children.values('title', 'slug')
    ids = ActivityDeal.objects.values_list('deal_id', flat=True).filter(is_active=True).order_by('position')
    if ids:
        deals = [ReDeal.objects.values(*values).get(pk=id) for id in ids]
        total = ids.count()
    else:
        deals = ReDeal.objects.values(*values).filter(category=category, is_active=True)
        total = deals.count()
    pageone = number if total > number else total
    offset = _rotate_category_index(rows, column, pageone)
    reserve = pageone - offset
    total_reserve = total - pageone
    result_list = deals[:offset]
    return locals()

@register.tag(name='position')
def position(parser, token):
    tag_name, arg1, arg2, arg3 = token.split_contents()
    if not arg1 and not arg2:
        raise template.TemplateSyntaxError, '%r tag requires three argument' % tag_name
    return PositionNode(arg1, arg2, arg3)

class PositionNode(template.Node):
    def __init__(self, a, b, c):
        self.a = template.Variable(a)
        self.b = template.Variable(b)
        self.c = template.Variable(c)

    def render(self, context):
        a = self.a.resolve(context)
        b = self.b.resolve(context)
        c = self.c.resolve(context)
        return a*b+c

@register.tag(name='get_spec_districts')
def get_spec_districts(parser, token):
    tag_name, arg = token.split_contents()
    if not arg:
        raise template.TemplateSyntaxError, '%r tag requires one argument' % tag_name
    return DistrictNode(arg)

class DistrictNode(template.Node):
    def __init__(self, arg):
        self.arg = template.Variable(arg)

    def render(self, context):
        arg = self.arg.resolve(context)
        if arg:
            context['spec_districts'] = get_districts_cache(arg)
        else:
            context['spec_districts'] = District.actives.filter(parent=None).values('city__name', 'city__slug', 'name', 'pk').order_by('city__slug')
        return ''

@register.tag(name='get_deal')
def get_deal(parser, token):
    tag_name, arg = token.split_contents()
    if not arg:
        raise template.TemplateSyntaxError, '%r tag requires one argument' % tag_name
    return DealNode(arg)

class DealNode(template.Node):
    def __init__(self, arg):
        self.arg = template.Variable(arg)

    def render(self, context):
        arg = self.arg.resolve(context)
        context['deal'] = ReDeal.objects.get(pk=arg)
        return ''
